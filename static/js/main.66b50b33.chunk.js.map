{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Default","value","setValue","reversed","setReversed","goodsWithID","sortType","isReversed","map","good","index","id","name","ALPHABETICALLY","sort","a","b","localeCompare","BY_LENGTH","length","reverse","getSortedGoods","className","type","cn","onClick","current","ReactDOM","render","document","getElementById"],"mappings":"6KAuBKA,E,mEAlBQC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAQGD,K,qCAAAA,E,2BAAAA,E,YAAAA,M,KA6BE,IAAME,EAAgB,WAC3B,MAA0BC,mBAAmBH,EAASI,SAAtD,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCH,oBAAS,GAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KACMC,EA1BR,SAAwBC,EAAoBC,GAC1C,IAAMF,EAAsBR,EACzBW,KAAI,SAACC,EAAMC,GAAP,MAAkB,CAAEC,GAAID,EAAOE,KAAMH,MAE5C,OAAQH,GACN,KAAKV,EAASiB,eAAgBR,EAC3BS,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEH,KAAKK,cAAcD,EAAEJ,SACvC,MACF,KAAKhB,EAASsB,UAAWb,EACtBS,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEH,KAAKO,OAASH,EAAEJ,KAAKO,UAEzC,KAAKvB,EAASI,SAShB,OAJIO,GACFF,EAAYe,UAGPf,EAMqBgB,CAAepB,EAAOE,GAOlD,OACE,sBAAKmB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,CAAE,WAAYvB,IAAUL,EAASiB,gBAC7C,SAAU,WACZY,QAAS,kBAAMvB,EAASN,EAASiB,iBAJnC,SAMGjB,EAASiB,iBAGZ,wBACEU,KAAK,SACLD,UAAWE,IAAG,CAAE,WAAYvB,IAAUL,EAASsB,WAC7C,SAAU,cACZO,QAAS,kBAAMvB,EAASN,EAASsB,YAJnC,SAMGtB,EAASsB,YAGZ,wBACEK,KAAK,SACLD,UAAWE,IAAG,CAAE,YAAarB,GAC3B,SAAU,cACZsB,QAAS,kBAAMrB,GAAY,SAAAsB,GAAO,OAAKA,MAJzC,sBASEzB,GAASE,IACT,wBACEoB,KAAK,SACLD,UAAU,mBACVG,QAvCiB,WACzBvB,EAASN,EAASI,SAClBI,GAAY,IAkCN,sBAUJ,6BACGC,EAAYG,KAAI,SAAAC,GAAI,OACnB,oBAAkB,UAAQ,OAA1B,SAAkCA,EAAKG,MAA9BH,EAAKE,aCtGxBgB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.66b50b33.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype Good = {\n  id: number,\n  name: string,\n};\n\nenum SortType {\n  ALPHABETICALLY = 'Sort alphabetically',\n  BY_LENGTH = 'Sort by length',\n  Default = '',\n}\n\nfunction getSortedGoods(sortType: SortType, isReversed: boolean) {\n  const goodsWithID: Good[] = goodsFromServer\n    .map((good, index) => ({ id: index, name: good }));\n\n  switch (sortType) {\n    case SortType.ALPHABETICALLY: goodsWithID\n      .sort((a, b) => a.name.localeCompare(b.name));\n      break;\n    case SortType.BY_LENGTH: goodsWithID\n      .sort((a, b) => a.name.length - b.name.length);\n      break;\n    case SortType.Default:\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    goodsWithID.reverse();\n  }\n\n  return goodsWithID;\n}\n\nexport const App: React.FC = () => {\n  const [value, setValue] = useState<SortType>(SortType.Default);\n  const [reversed, setReversed] = useState(false);\n  const goodsWithID: Good[] = getSortedGoods(value, reversed);\n\n  const handleResetOnClick = () => {\n    setValue(SortType.Default);\n    setReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn({ 'is-light': value !== SortType.ALPHABETICALLY },\n            'button', 'is-info')}\n          onClick={() => setValue(SortType.ALPHABETICALLY)}\n        >\n          {SortType.ALPHABETICALLY}\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn({ 'is-light': value !== SortType.BY_LENGTH },\n            'button', 'is-success')}\n          onClick={() => setValue(SortType.BY_LENGTH)}\n        >\n          {SortType.BY_LENGTH}\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn({ 'is-light': !reversed },\n            'button', 'is-warning')}\n          onClick={() => setReversed(current => !current)}\n        >\n          Reverse\n        </button>\n\n        {(value || reversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger\"\n            onClick={handleResetOnClick}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goodsWithID.map(good => (\n          <li key={good.id} data-cy=\"Good\">{good.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}